#!/bin/sh

genindex() {
echo "<ul>"
recfmt '
<li>
<b>{{Date}}:</b>
<a href="{{File}}">{{Name}}</a>
{{Extra}}
</li>
' < "${1:-/dev/stdin}"
echo "</ul>"
}

injectindex() {
sed 's/^File: \//File: /' "${1:-/dev/stdin}" | awk '
	/^File:.*\.html/ {
		print "Contents:"
		print system("sed s/^/+/ " $2) > "/dev/null"
	}
	{ print }
'
}

genrss() {
while getopts t:u:d: flag; do
	case $flag in
		t) title=$OPTARG;;
		u) url=$OPTARG;;
		d) description=$OPTARG;;
	esac
done
shift "$((OPTIND - 1))"
cat <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
<title>${title:-Title}</title>
<link>${url:-url}</link>
<description>${description:-description}</description>
EOF

recfmt '
<item>
<title>{{Name}}</title>
<link>{{File}}</link>
<guid>{{File}}</guid>
<pubDate>{{Date}}</pubDate>
<description><![CDATA[
<a href="{{File}}">{{Name}}</a>
{{Extra}}
{{Contents}}
]]></description>
</item>
' < "${1:-/dev/stdin}"

cat <<EOF
</channel>
</rss>
EOF
}

wraphtml() {
while getopts t:R: arg; do
	case $arg in
		t) template=$OPTARG;;
		R) regex=$OPTARG;;
		\?|*) exit 1;;
	esac
done
shift $(expr $OPTIND - 1)

sed "/${regex:-^\s*<!--WRAPHTML-->$}/r ${1:-/dev/stdin}" \
	"${template:-template.html}"
}

dirindex() {
while getopts s: flag; do
	case $flag in
		s) format=$OPTARG;;
	esac
done
shift "$((OPTIND - 1))"

for dir do
	find "$dir" -type f -printf "${format:-<li><a href=\"%p\">%p</a></li>\n}"
done
}

markdown2html() {
pandoc -f gfm -t html "${1:-/dev/stdin}"
}

relpath() {
for dir do
	find "$dir" -type f -name '*.html' |
	while read -r file; do
		grep "\(src\|href\)=[\"'][^/]" "$file" | grep -v "\(src\|href\)=[\"']\w\+://"
	done
done
}

gentoc() {
file=$(tr '\n' ' ' < "${1:-/dev/stdin}" | tr -d '\t' | grep -o '<h[1-6][^>]*>[^<]\+</h[1-6]>')
if [ -n "$file" ]; then
awk -F'</?h[1-6][^>]*>' '
	BEGIN {
		print "<ol class=\"toc\">"
		last_level = 1
	}

	{
		current_level = substr($0, 3, 1) # Get heading size (<hX>)
		if (! last_level) last_level = current_level
		diff_level = current_level - last_level

		if (diff_level != 0) {
			for (i = 0; i < diff_level; i++) print "<ol>"
			for (i = 0; i > diff_level; i--) print "</ol>"
		}
		printf "<li>%s</li>\n", $2
		last_level = current_level
	}

	END {
		for (i = 1; i < current_level; i++) print "</ol>"
		print "</ol>"
	}
' <<EOF
$file
EOF
fi
}
